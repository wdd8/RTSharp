name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      transmission:
        image: lscr.io/linuxserver/transmission:version-3.00-r5
        ports:
          - 9091:9091

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0"
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        id: build
        run: dotnet build --no-restore
      - name: Test
        run: >
          dotnet test
          --no-build
          --verbosity normal
          --logger "trx;LogFileName=test-results.trx"
          --results-directory "TestResults"
      - name: Test report
        id: test_report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test
          path: 'TestResults/*.trx'
          reporter: dotnet-trx
          fail-on-error: false
      - name: Upload .NET test results
        uses: actions/upload-artifact@v3
        if: always() && steps.build.outcome == 'success'
        with:
          name: test-results
          path: TestResults
      - name: Generate build badge
        if: always() && github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: e6de305db65d34d270c2ef4be84dcb82
          filename: main-build.json
          label: build
          message: >
            ${{ steps.build.outcome == 'success' && 'passing' || 'failing'}}
          color: ${{ steps.build.outcome == 'success' && 'success' || 'critical' }}
      - name: Generate test badge
        if: always() && github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: e6de305db65d34d270c2ef4be84dcb82
          filename: main-test.json
          label: tests
          message: >
            ${{ steps.build.outcome == 'success' && (
              format(
                '{0} passed{1}',
                steps.test_report.outputs.passed,
                steps.test_report.outputs.failed > 0 &&
                  format(
                    ', {0} failed',
                    steps.test_report.outputs.failed
                  )
                || ''
              )
            ) || (
              'skipped'
            )}}
          color: ${{ steps.build.outcome == 'success' && (steps.test_report.outputs.conclusion == 'success' && 'success' || 'critical') || 'inactive' }}
